#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ REST API –º–µ—Ç–æ–¥–æ–≤ –°–ø—Ä–∏–Ω—Ç–∞ 2
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç:
- GET /submitData/<id> ‚Äî –ø–æ–ª—É—á–µ–Ω–∏–µ –ø–µ—Ä–µ–≤–∞–ª–∞ –ø–æ ID
- PATCH /submitData/<id> ‚Äî —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–µ—Ä–µ–≤–∞–ª–∞
- GET /submitData/?user__email=<email> ‚Äî —Å–ø–∏—Å–æ–∫ –ø–µ—Ä–µ–≤–∞–ª–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
"""

import requests
import json

# URL –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (–ª–æ–∫–∞–ª—å–Ω—ã–π —Å–µ—Ä–≤–µ—Ä)
BASE_URL = "http://localhost:8000"
SUBMIT_DATA_URL = f"{BASE_URL}/submitData/"

# –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–µ—Ä–µ–≤–∞–ª–∞
test_data = {
    "beauty_title": "–ø–µ—Ä. ",
    "title": "–¢–µ—Å—Ç–æ–≤—ã–π –ø–µ—Ä–µ–≤–∞–ª",
    "other_titles": "–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ", 
    "connect": "—Å–æ–µ–¥–∏–Ω—è–µ—Ç –¥–æ–ª–∏–Ω—ã –¢–µ—Å—Ç1 –∏ –¢–µ—Å—Ç2",
    "user": {
        "email": "test@example.com",
        "fam": "–¢–µ—Å—Ç–æ–≤", 
        "name": "–¢–µ—Å—Ç",
        "otc": "–¢–µ—Å—Ç–æ–≤–∏—á",
        "phone": "+7 999 999 99 99"
    },
    "coords": {
        "latitude": "55.7558",
        "longitude": "37.6176", 
        "height": "1500"
    },
    "level": {
        "winter": "2–ê",
        "summer": "1–ë", 
        "autumn": "1–ë",
        "spring": "2–ê"
    },
    "images": [
        {"data": "base64encoded_test_image_1", "title": "–í–∏–¥ –Ω–∞ —Å–µ–¥–ª–æ–≤–∏–Ω—É"}, 
        {"data": "base64encoded_test_image_2", "title": "–ü–æ–¥—ä—ë–º –ø–æ —Å–∫–ª–æ–Ω—É"}
    ]
}

# –î–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–µ—Ä–µ–≤–∞–ª–∞
update_data = {
    "title": "–û–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–µ—Ä–µ–≤–∞–ª–∞",
    "beauty_title": "–ø–µ—Ä. –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π",
    "other_titles": "–ù–æ–≤–æ–µ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ",
    "connect": "—Å–æ–µ–¥–∏–Ω—è–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–æ–ª–∏–Ω—ã –ê –∏ –ë",
    "coords": {
        "latitude": "56.0000",
        "longitude": "38.0000", 
        "height": "1600"
    },
    "level": {
        "winter": "3–ê",
        "summer": "2–ê", 
        "autumn": "2–ê",
        "spring": "3–ê"
    }
}

def test_create_pass():
    """–°–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–π –ø–µ—Ä–µ–≤–∞–ª –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–∏—Ö —Ç–µ—Å—Ç–æ–≤"""
    print("üìù –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–µ—Ä–µ–≤–∞–ª–∞...")
    try:
        response = requests.post(
            SUBMIT_DATA_URL,
            json=test_data,
            headers={'Content-Type': 'application/json'}
        )
        
        print(f"–°—Ç–∞—Ç—É—Å: {response.status_code}")
        response_data = response.json()
        print(f"–û—Ç–≤–µ—Ç: {json.dumps(response_data, indent=2, ensure_ascii=False)}")
        
        if response.status_code == 200 and response_data.get('status') == 200:
            pass_id = response_data.get('id')
            print(f"‚úÖ –ü–µ—Ä–µ–≤–∞–ª —Å–æ–∑–¥–∞–Ω —Å ID: {pass_id}")
            return pass_id
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–µ—Ä–µ–≤–∞–ª–∞")
            return None
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
        return None


def test_get_pass_by_id(pass_id):
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–ª—É—á–µ–Ω–∏–µ –ø–µ—Ä–µ–≤–∞–ª–∞ –ø–æ ID"""
    print(f"\nüîç –¢–µ—Å—Ç GET /submitData/{pass_id}")
    try:
        response = requests.get(f"{SUBMIT_DATA_URL}{pass_id}/")
        
        print(f"–°—Ç–∞—Ç—É—Å: {response.status_code}")
        if response.status_code == 200:
            data = response.json()
            print(f"‚úÖ –ü–µ—Ä–µ–≤–∞–ª –ø–æ–ª—É—á–µ–Ω:")
            print(f"   –ù–∞–∑–≤–∞–Ω–∏–µ: {data.get('title')}")
            print(f"   –°—Ç–∞—Ç—É—Å: {data.get('status')}")
            print(f"   –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {data.get('user', {}).get('email')}")
            print(f"   –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: {data.get('coords')}")
            return True
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞: {response.json()}")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
        return False


def test_update_pass(pass_id):
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–µ—Ä–µ–≤–∞–ª–∞"""
    print(f"\n‚úèÔ∏è –¢–µ—Å—Ç PATCH /submitData/{pass_id}")
    try:
        response = requests.patch(
            f"{SUBMIT_DATA_URL}{pass_id}/",
            json=update_data,
            headers={'Content-Type': 'application/json'}
        )
        
        print(f"–°—Ç–∞—Ç—É—Å: {response.status_code}")
        response_data = response.json()
        print(f"–û—Ç–≤–µ—Ç: {json.dumps(response_data, indent=2, ensure_ascii=False)}")
        
        if response.status_code == 200 and response_data.get('state') == 1:
            print("‚úÖ –ü–µ—Ä–µ–≤–∞–ª —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω")
            return True
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {response_data.get('message')}")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
        return False


def test_update_pass_forbidden_fields(pass_id):
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–ø—ã—Ç–∫—É —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã—Ö –ø–æ–ª–µ–π"""
    print(f"\nüö´ –¢–µ—Å—Ç PATCH /submitData/{pass_id} (–∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–µ –ø–æ–ª—è)")
    
    forbidden_data = {
        "title": "–ù–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ",
        "user": {
            "email": "newemail@example.com",  # –ó–∞–ø—Ä–µ—â–µ–Ω–æ!
            "fam": "–ù–æ–≤–∞—è –§–∞–º–∏–ª–∏—è"           # –ó–∞–ø—Ä–µ—â–µ–Ω–æ!
        }
    }
    
    try:
        response = requests.patch(
            f"{SUBMIT_DATA_URL}{pass_id}/",
            json=forbidden_data,
            headers={'Content-Type': 'application/json'}
        )
        
        print(f"–°—Ç–∞—Ç—É—Å: {response.status_code}")
        response_data = response.json()
        print(f"–û—Ç–≤–µ—Ç: {json.dumps(response_data, indent=2, ensure_ascii=False)}")
        
        if response.status_code == 400 and response_data.get('state') == 0:
            print("‚úÖ –ó–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–µ –ø–æ–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã")
            return True
        else:
            print("‚ùå –û—à–∏–±–∫–∞: –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–µ –ø–æ–ª—è –Ω–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
        return False


def test_get_passes_by_user_email():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–ª—É—á–µ–Ω–∏–µ –ø–µ—Ä–µ–≤–∞–ª–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ email"""
    print(f"\nüìã –¢–µ—Å—Ç GET /submitData/?user__email=test@example.com")
    try:
        response = requests.get(f"{SUBMIT_DATA_URL}?user__email=test@example.com")
        
        print(f"–°—Ç–∞—Ç—É—Å: {response.status_code}")
        if response.status_code == 200:
            data = response.json()
            print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(data)} –ø–µ—Ä–µ–≤–∞–ª–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:")
            for i, pass_item in enumerate(data, 1):
                print(f"   {i}. {pass_item.get('title')} (ID: {pass_item.get('id')}) - —Å—Ç–∞—Ç—É—Å: {pass_item.get('status')}")
            return True
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞: {response.json()}")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
        return False


def test_get_passes_by_nonexistent_email():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–ª—É—á–µ–Ω–∏–µ –ø–µ—Ä–µ–≤–∞–ª–æ–≤ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    print(f"\nüîç –¢–µ—Å—Ç GET /submitData/?user__email=nonexistent@example.com")
    try:
        response = requests.get(f"{SUBMIT_DATA_URL}?user__email=nonexistent@example.com")
        
        print(f"–°—Ç–∞—Ç—É—Å: {response.status_code}")
        if response.status_code == 200:
            data = response.json()
            if len(data) == 0:
                print("‚úÖ –î–ª—è –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤–æ–∑–≤—Ä–∞—â–µ–Ω –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫")
                return True
            else:
                print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–æ –Ω–∞–π–¥–µ–Ω–æ {len(data)} –ø–µ—Ä–µ–≤–∞–ª–æ–≤")
                return False
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞: {response.json()}")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
        return False


def test_get_nonexistent_pass():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–ª—É—á–µ–Ω–∏–µ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–µ—Ä–µ–≤–∞–ª–∞"""
    print(f"\nüîç –¢–µ—Å—Ç GET /submitData/99999 (–Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π ID)")
    try:
        response = requests.get(f"{SUBMIT_DATA_URL}99999/")
        
        print(f"–°—Ç–∞—Ç—É—Å: {response.status_code}")
        if response.status_code == 404:
            print("‚úÖ –î–ª—è –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ ID –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –≤–æ–∑–≤—Ä–∞—â–µ–Ω 404")
            return True
        else:
            print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å: {response.status_code}")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
        return False


if __name__ == "__main__":
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ API –°–ø—Ä–∏–Ω—Ç–∞ 2")
    print("=" * 60)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
    try:
        response = requests.get(BASE_URL, timeout=5)
        print("‚úÖ –°–µ—Ä–≤–µ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω")
    except:
        print("‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –æ–Ω –∑–∞–ø—É—â–µ–Ω –Ω–∞ localhost:8000")
        exit(1)
    
    results = []
    
    # 1. –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –ø–µ—Ä–µ–≤–∞–ª
    pass_id = test_create_pass()
    if not pass_id:
        print("‚ùå –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ç–µ—Å—Ç—ã –±–µ–∑ —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ –ø–µ—Ä–µ–≤–∞–ª–∞")
        exit(1)
    
    # 2. –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –ø–µ—Ä–µ–≤–∞–ª–∞ –ø–æ ID
    results.append(test_get_pass_by_id(pass_id))
    
    # 3. –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–µ—Ä–µ–≤–∞–ª–∞
    results.append(test_update_pass(pass_id))
    
    # 4. –¢–µ—Å—Ç–∏—Ä—É–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã—Ö –ø–æ–ª–µ–π
    results.append(test_update_pass_forbidden_fields(pass_id))
    
    # 5. –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –ø–µ—Ä–µ–≤–∞–ª–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    results.append(test_get_passes_by_user_email())
    
    # 6. –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    results.append(test_get_passes_by_nonexistent_email())
    
    # 7. –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø–µ—Ä–µ–≤–∞–ª
    results.append(test_get_nonexistent_pass())
    
    # –ò—Ç–æ–≥–∏
    print("\n" + "=" * 60)
    passed = sum(results)
    total = len(results)
    
    if passed == total:
        print(f"üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã! ({passed}/{total})")
    else:
        print(f"‚ö†Ô∏è –ü—Ä–æ–π–¥–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤: {passed}/{total}")
    print("=" * 60) 